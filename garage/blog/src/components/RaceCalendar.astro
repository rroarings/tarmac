---
// Import necessary modules
import { getCollection } from "astro:content";
import RaceCard from "./RaceCard.astro";

// Define props
interface Props {
  season: string;
  showAllRaces?: boolean;
}

// Get props
const { season, showAllRaces = false } = Astro.props;

// Fetch races for the specified season
const races = await getCollection("races", ({ data }) => {
  return data.season === season;
});

// Helper for UTC midnight conversion
const toUTCMidnight = (date: Date) => {
  const d = new Date(date);
  d.setUTCHours(0, 0, 0, 0);
  return d;
};

// Get current date for comparison using UTC
const nowUTC = toUTCMidnight(new Date());

// Sort races by date using UTC
const sortedRaces = races.sort((a, b) => {
  const aDate = toUTCMidnight(new Date(a.data.date));
  const bDate = toUTCMidnight(new Date(b.data.date));
  return aDate.getTime() - bDate.getTime();
});

// Find completed and upcoming races using UTC dates
const completedRaces = sortedRaces.filter((race) => {
  const raceDate = toUTCMidnight(new Date(race.data.date));
  return race.data.completed || raceDate < nowUTC;
});
const upcomingRaces = sortedRaces.filter((race) => {
  const raceDate = toUTCMidnight(new Date(race.data.date));
  return !race.data.completed && raceDate >= nowUTC;
});

// Get the most recent completed race
const lastCompletedRace = completedRaces[completedRaces.length - 1];

// Take only the next two upcoming races when not showing all
const nextTwoRaces = upcomingRaces.slice(0, 2);

// Determine which races to display
const racesToDisplay = showAllRaces
  ? sortedRaces
  : [...(lastCompletedRace ? [lastCompletedRace] : []), ...nextTwoRaces];
---

<div class="bg-gray-100 border border-gray-300 rounded p-6">
  <div class="flex items-center justify-between mb-6">
    <div class="flex items-center">
      <i class="bi bi-calendar3 text-3xl text-gray-700 mr-4"></i>
      <h3 class="text-2xl">{season} Race Calendar</h3>
    </div>
    {
      lastCompletedRace && (
        <a
          href={`/seasons/${season}/races`}
          class="text-gray-600 hover:text-red-600"
        >
          View Races
        </a>
      )
    }
  </div>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-4">
    {racesToDisplay.map((race) => <RaceCard race={race} completedRaces={completedRaces} />)}
  </div>
</div>
